name: python_env_job_runner
description: Python Env Remote Development
inputs:
  profile:
    required: true
    type: string
  region:
    required: true
    type: string
  namespace:
    required: true
    type: string
  repository:
    required: true
    type: string
  repository_ref:
    required: true
    type: string
  github_token:
    required: true
    type: string
  repository_py_env_file_path:
    required: true
    type: string
  docker_image_tag:
    required: true
    type: string
  timeout_in_minutes:
    required: true
    type: string
  command:
    required: true
    type: string
  workdir:
    required: false
    default: guest_repo
  ofirydevops_dir:
    required: true
    type: string


runs:
  using: composite
  steps:

    - name: Setup Global Conf
      shell: bash
      working-directory: ${{ inputs.ofirydevops_dir }}
      run: |
        ./.github/scripts/setup_global_conf.sh ${{ inputs.profile }} ${{ inputs.region }} ${{ inputs.namespace }}

    - name: Checkout Guest Repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        token: ${{ inputs.github_token }}
        ref: ${{ inputs.repository_ref }}
        path: ${{ inputs.ofirydevops_dir }}/${{ inputs.workdir }}

    - name: Pipenv Install
      shell: bash
      working-directory: ${{ inputs.ofirydevops_dir }}
      run: pipenv install

    - name: Build Python Env Docker
      shell: bash
      working-directory: ${{ inputs.ofirydevops_dir }}
      run: |
          pipenv run python3.10 -u -m python_env_runner.scripts.build_py_env \
                                          --py-env-conf-file ${{ inputs.workdir }}/${{ inputs.repository_py_env_file_path }} \
                                          --docker-image-tag ${{ inputs.docker_image_tag }} \
                                          --target runtime \
                                          --workdir ${{ inputs.workdir }}

    - name: Run Python Job
      shell: bash
      working-directory: ${{ inputs.ofirydevops_dir }}
      run: |
        TIMEOUT_SECONDS=$(( ${{ inputs.timeout_in_minutes }} * 60 ))
        timeout $TIMEOUT_SECONDS \
        pipenv run python3.10 -u -m python_env_runner.scripts.run_py_env \
                                      --docker-image-tag ${{ inputs.docker_image_tag }} \
                                      --entrypoint "${{ inputs.command }}"


