name: python_env_remote_dev
description: Python env remote development
inputs:
  profile:
    required: true
    type: string
  region:
    required: true
    type: string
  namespace:
    required: true
    type: string
  ofirydevops_ref:
    required: true
    type: string
  repository:
    required: true
    type: string
  repository_ref:
    required: true
    type: string
  github_token:
    required: true
    type: string
  repository_py_env_file_path:
    required: true
    type: string
  docker_image_tag:
    required: true
    type: string
  uptime_in_minutes:
    required: true
    type: string
  max_uptime:
    required: false
    type: string
    default: 120
  git_user_email:
    required: false
    type: string
    default: "@"
  global_conf_file:
    required: false
    default: pylib/ofirydevops/global_conf.yaml
  workdir:
    required: false
    default: guest_repo



runs:
  using: composite
  steps:
    - name: Checkout ofirydevops
      uses: actions/checkout@v4
      with:
        repository: ofirydevops/ofirydevops
        ref: ${{ inputs.ofirydevops_ref }}

    - name: Setup Global Conf
      shell: bash
      run: |
        cat > ${{ inputs.global_conf_file }} <<EOF
        region: ${{ inputs.region }}
        profile: ${{ inputs.profile }}
        namespace: ${{ inputs.namespace }}
        EOF
        cat ${{ inputs.global_conf_file }}

    - name: Checkout Guest Repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        token: ${{ inputs.github_token }}
        ref: ${{ inputs.repository_ref }}
        path: ${{ inputs.workdir }}

    - name: Pipenv Install
      shell: bash
      run: pipenv install

    - name: Validate Uptime
      shell: bash
      run: |
        UPTIME_IN_MINUTES=${{ inputs.uptime_in_minutes }}
        if [ "$UPTIME_IN_MINUTES" -gt "${{ inputs.max_uptime }}" ]; then
          UPTIME_IN_MINUTES=${{ inputs.max_uptime }}
        fi
        echo "UPTIME_IN_MINUTES=$UPTIME_IN_MINUTES" >> $GITHUB_ENV 

    - name: Get Public IP
      shell: bash
      id: get_public_ip
      run: |
        IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
        echo "Public IP: $IP"
        echo "public_ip=$IP" >> $GITHUB_OUTPUT

    - name: Build Python Env Docker
      shell: bash
      run: |
          pipenv run python3.10 -m python_env_runner.scripts.build_py_env \
                                          --py-env-conf-file ${{ inputs.workdir }}/${{ inputs.repository_py_env_file_path }} \
                                          --docker-image-tag ${{ inputs.docker_image_tag }} \
                                          --target remote_dev \
                                          --workdir ${{ inputs.workdir }} \
                                          --git-ref ${{ inputs.repository_ref }} \
                                          --git-user-email ${{ inputs.git_user_email }}

    - name: Run Python Env
      shell: bash
      run: |
        TIMEOUT_SECONDS=$(( $UPTIME_IN_MINUTES * 60 ))
        echo "For remote development run ssh command: ssh root@${{ steps.get_public_ip.outputs.public_ip }} -p 5000 -o StrictHostKeyChecking=no"
        timeout $TIMEOUT_SECONDS \
        pipenv run python3.10 -u -m python_env_runner.scripts.run_py_env \
                                      --remote-dev \
                                      --docker-image-tag ${{ inputs.docker_image_tag }} || true


