name: python_env_cache_update

on:
  workflow_dispatch:
    inputs:
      node:
        description: Node to run on
        type: choice
        options:
        - basic_amd64_100GB
        - basic_arm64_100GB
        required: true
      gpu:
        required: true
        type: boolean
        default: false
        description: ""
      conda_env:
        description: Conda environment name
        type: choice
        options:
          - ofiry
          - py310_gpu
          - py310_full
        required: true
  

env:
  DOCKER_IMAGE_TAG: ${{ github.run_id }}-${{ github.run_number }}
  SERVICE_PREFIX: main_update_cache

jobs:
  env_cache_update:
    runs-on:
      - self-hosted
      - ${{ github.event.inputs.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Driver And ECR Auth
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} --profile ${{ vars.AWS_DEFAULT_PROFILE }} | \
                    docker login --username AWS --password-stdin ${{ vars.AWS_ECR_REGISTRY }}

      - name: Source and use get_dc_service
        id: get_dc_service            
        run: |
            source .github/scripts/utils.sh
            service=$(get_dc_service ${{ env.SERVICE_PREFIX }} ${{ github.event.inputs.node }})
            if [ "${{ github.event.inputs.gpu }}" == "true" ]; then
              service=${service}_gpu
            fi
            echo "Service name: $service"
            echo "service=$service" >> $GITHUB_OUTPUT

      - name: Update Conda Env Docker Cache
        run: |
          stat data_science/conda_envs/${{ github.event.inputs.conda_env }}.yaml
          docker compose -f data_science/docker/docker-compose.yml build ${{ steps.get_dc_service.outputs.service }}
        env:
          DOCKER_IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}
          CONDA_ENV: ${{ github.event.inputs.conda_env }}
