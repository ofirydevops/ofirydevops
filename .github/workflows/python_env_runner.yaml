name: python_env_runner

on:
  workflow_dispatch:
    inputs:
      command:
        description: "Run command"
        type: string
        required: true
        default: python data_science/hello_world.py
      timeout:
        description: "Runner timeout"
        type: choice
        options: [10, 20 , 40, 80]
        required: true
      conda_env:
        description: "Conda environment name"
        type: choice
        options:
          - ofiry
          - py310_gpu
          - py310_full
        required: true
      node:
        description: "Runner node"
        type: choice
        options:
          - basic_amd64_100GB
          - basic_arm64_100GB
          - gpu_amd64_100GB
        required: true

env:
  SERVICE_PREFIX: main
  DOCKER_IMAGE_TAG: ${{ github.run_id }}-${{ github.run_number }}

jobs:
  build_and_run:
    runs-on: 
      - self-hosted
      - ${{ github.event.inputs.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ECR Auth
        run: |
          docker buildx ls
          sudo cat /etc/docker/daemon.json
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} --profile ${{ vars.AWS_DEFAULT_PROFILE }} | \
                    docker login --username AWS --password-stdin ${{ vars.AWS_ECR_REGISTRY }}

      - name: Source and use get_dc_service
        id: get_dc_service
        run: |
            source .github/scripts/utils.sh
            service=$(get_dc_service ${{ env.SERVICE_PREFIX }} ${{ github.event.inputs.node }})
            echo "Service name: $service"
            echo "service=$service" >> $GITHUB_OUTPUT

      - name: Build Conda Env Docker
        run: |
          stat data_science/conda_envs/${{ github.event.inputs.conda_env }}.yaml
          docker compose -f data_science/docker/docker-compose.yml build ${{ steps.get_dc_service.outputs.service }}
        env:
          DOCKER_IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}
          CONDA_ENV: ${{ github.event.inputs.conda_env }}

      - name: Run Conda Env
        run: |
          TIMEOUT_SECONDS=$(( ${{ github.event.inputs.timeout }} * 60 ))
          timeout $TIMEOUT_SECONDS \
          docker compose -f data_science/docker/docker-compose.yml run ${{ steps.get_dc_service.outputs.service }} ${{ github.event.inputs.command }}
        env:
          DOCKER_IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}